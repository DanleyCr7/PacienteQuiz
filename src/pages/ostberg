import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TouchableWithoutFeedback,
  ScrollView,
  Dimensions,
  Alert
} from 'react-native';
import firebase from 'firebase'
import { RadioButtons } from 'react-native-radio-buttons'
const { width, height } = Dimensions.get('window')
var index = -1
var question = []
var selected = ''
var options = []
var calculo = 1
var pesoOpt = 0
export default class Quiz extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      myText:
        [
          '',
          'Considerando apenas o seu bem-estar pessoal e com liberdade total de planejar seu dia, a que horas você se levantaria?',
          'Considerando apenas o seu bem-estar pessoal e com liberdade total de planejar sua noite a que horas você se deitaria?',
          'Até que ponto você depende do despertado para acordar de manhã?',
          'Você acha fácil acordar de manhã?',
          'Você se sente alerta durante a primeira meia hora depois de acordar?',
          'Como é o seu apetite durante a primeira meia hora depois de acordar?',
          'Durante a primeira meia hora depois de acordar você se sente cansado?',
          'Se você não tem compromisso no dia seguinte e comparando com sua hora habitual, a que horas voce gostaria de ir deitar?',
          'Você decidiu fazer exercícios físicos. Um amigo sugeriu o horário das 7h00 às 8h00 da manhã, duas vezes por semana. Considerando apenas seu bem-estar pessoal, o que você acha que fazer exercícios nesse horário?',
          'A que horas da noite você se sente cansado e com vontade de dormir?',
          'Você quer estar no máximo de sua forma para fazer um teste que dura duas horas e que você sabe que é mentalmente cansativo. Considerando apenas seu bem-estar pessoal, qual desses horários você escolhereria para fazer esse teste?',
          'Se você fosse deitar às 23:00 horas em que nivel de cansaço você se sentiria?',
          'Por alguma razão você foi dormir várias horas mais tarde do que é seu costume. Se no dia seguinte você não tiver hora certa para acordar, o que aconteceria com você?',
          'Se você que ficar acordado das 4:00 às 6:00 horas para realizar uma tarefa e não tiver compromissos no dia seguinte, o que você faria?',
          'Se você tiver que fazer duas horas de exercício físico pesado e considerando apenas o seu bem-estar pessoal, qual destes horários você escolheria?',
          'Você decidiu fazer exercícios físicos. Um amigo sugeriu o horário das 22:00 às 23:00 horas, duas vezes por semana. Considerando apenas seu bem-estar pessoal, o que você acha que fazer exercícios nesse horário?',
          'Suponha você possa escolher o seu próprio horário de trabalho e que você e que você deva trabalhar cinco horas seguidas por dia. Imagine que seja um serviço interessante e que você ganhe por produção. Qual o horário que você escolheria?(Marque a hora do início)',
          'A que hora do dia você atinge seu melhor momento de bem-estar?',
          'Fala-se em pessoas matutinas e vespertinas (as primeiras gostam de acordar cedo e dormir cedo, as segundas de acordar tarde e dormir tarde). Com que desses tipos você se identifica?',
        ],
      peso: [
        [0, 6, 4, 2, 0],
        [0, 5, 4, 3, 2, 1],
        [0, 5, 4, 3, 2, 1],
        [0, 4, 3, 2, 1],
        [0, 1, 2, 3, 4],
        [0, 1, 2, 3, 4],
        [0, 1, 2, 3, 4],
        [0, 1, 2, 3, 4],
        [0, 4, 3, 2, 1],
        [0, 4, 3, 2, 1],
        [0, 5, 4, 3, 2, 1],
        [0, 6, 4, 2, 0],
        [0, 0, 2, 3, 5],
        [0, 4, 3, 2, 1],
        [0, 1, 2, 3, 4],
        [0, 4, 3, 2, 1],
        [0, 1, 2, 3, 4],
        [0, 5, 4, 3, 2, 1],
        [0, 5, 4, 3, 2, 1],
        [0, 6, 4, 2, 1],
      ],
      options: [
        [
          '5h00-06h30',
          '6h00-07h45',
          '07h45-09h45',
          '09h45-11h00',
          '11h00-12h00'
        ],
        [
          '20h00-21h00',
          '21h00-22h45',
          '22h15-24h30',
          '24h30-01h45',
          '01h45-03h00'
        ],
        [
          'Nada dependente',
          'Não muito dependente',
          'Razoalvemente dependente',
          'Muito dependente'
        ],
        [
          'Nada fácil',
          'Não muito fácil',
          'Razoalvemente fácil',
          'Muito fácil'
        ],
        [
          'Nada alerta',
          'Não muito alerta',
          'Razoalvemente alerta',
          'Muito alerta'
        ],
        [
          'Muito ruim',
          'Não muito ruim',
          'Razoalvemente ruim',
          'Muito bom'
        ],
        [
          'Muito cansado',
          'Não muito cansado',
          'Razoalvemente em forma',
          'Em plena forma'
        ],
        [
          'Nunca mais tarde',
          'Menos que uma hora mais tarde',
          'Entre uma e duas horas mais tarde',
          'Mais do que duas horas mais tarde'
        ],
        [
          'Estaria em boa forma',
          'Estaria razoalvemente em forma',
          'Acharia isso difícil',
          'Acharia isso muito difícil'
        ],
        [
          '20h00-21h00',
          '21h00-22h15',
          '22h15-00h45',
          '00h45-02h00',
          '2h00-03h00'
        ],
        [
          'Das 8:00 às 10:00',
          'Das 11:00 às 13:00',
          'Das 15:00 às 17:00',
          'Das 19:00 às 21:00',
        ],
        [
          'Nada cansado',
          'Um pouco cansado',
          'Razoavelmente cansado',
          'Muito cansado'
        ],
        [
          'Acordaria na hora normal sem sono',
          'Acordaria na hora normal com sono',
          'Acordaria na hora normal e dormiria novamente',
          'Acordaria mais tarde do que seu costume'
        ],
        [
          'Só dormiria depois de fazer a tarefa',
          'Tiraria uma soneca antes da tarefa e dormiria depois',
          'Dormiria bastante antes e tiraria uma soneca depois',
          'Só dormiria antes de fazer a tarefa'
        ],
        [
          'Das 8:00 às 10:00',
          'Das 11:00 às 13:00',
          'Das 15:00 às 17:00',
          'Das 19:00 às 21:00'
        ],
        [
          'Estaria em boa forma',
          'Estaria razoavelmente em forma',
          'Acharia isso difícil',
          'Acharia isso muito difícil'
        ],
        [
          '5 horas começando entre 05–08 h',
          '5 horas começando entre 08–09 h',
          '5 horas começando entre 09–14 h',
          '5 horas começando entre 14–17 h',
          '5 horas comecando entre 17–04 h',
        ],
        [
          '23h:00-05h00',
          '05h00-08h00',
          '08h00-10h00',
          '10h00-17h00',
          '17h00-22h00',
          '22h00-24h00'
        ],
        [
          'Tipo matutino',
          'Mais matutino  que vepertino',
          'Mais vespertino que matutino',
          'Tipo Vespertino'
        ],
        // [
        //   'teste',
        //   'teste2'
        // ]
      ],
      nquestion: null,
      total: null,
      questions: [],
      question: '',
      Proximo: 'Iniciar',
      Anterior: '',
      pesquisador: '',
      selected: ''
    }
  }
  calculo(i) {

  }

  loadQustion = async (i) => {
    pesoOpt = options.lastIndexOf(selected)
    console.log(this.state.peso[i])
    console.log(this.state.peso[i].lastIndexOf(pesoOpt + 1))

    // calculo = calculo + options.lastIndexOf(selected)
    options = this.state.options[i]
    this.setState({ Proximo: 'Proximo', Anterior: 'Anterior' })

    await this.setState({ question: this.state.myText[i + 1], nquestion: i + 1, total: this.state.myText.length - 1 });
    // await question.push({ question: this.state.myText[i], resposta: selected })
    if (i === this.state.myText.length - 2) {
      this.setState({ Proximo: 'Finalizar', Anterior: '' })

    }
    if (i === this.state.myText.length - 1) {
      // const respostas = {
      //   question: question,
      //   idPesquisador: this.state.pesquisador
      // }
      // // console.log(teste)

      // await this.props.navigation.replace('form', {
      //   respostas: respostas,
      //   rota: 'Ostberg'
      // })
    }
  }


  render() {
    const { params } = this.props.navigation.state;
    this.state.pesquisador = params.ostberg

    function setSelectedOption(selectedOption) {
      selected = selectedOption
      // console.log(selected)
    }

    function renderOption(option, selected, onSelect, index) {
      const style = selected ? styles.escolhido : styles.naoEscolhido;

      return (
        <TouchableWithoutFeedback onPress={onSelect} key={index}>
          <Text style={style}>{option}</Text>
        </TouchableWithoutFeedback>
      );
    }

    function renderContainer(optionNodes) {
      return <View>{optionNodes}</View>;
    }
    // this.state.question = 'Para lançar um objeto ?'
    return (
      <View style={styles.container}>
        <View style={styles.ViewNQUIZ}>
          <Text style={styles.numQuiz}>Questão {this.state.nquestion}</Text>
          <Text style={{ fontSize: 20, color: '#8F98C1' }}> /{this.state.total}</Text>
        </View>

        <ScrollView>
          <View style={{ alignItems: 'center', width: width }}>
            <Text style={styles.textQuiz}>
              {this.state.question}
            </Text>
            <RadioButtons
              options={options}
              onSelection={setSelectedOption.bind(this)}
              selectedOption={this.state.selectedOption}
              renderOption={renderOption}
              renderContainer={renderContainer}
            />
            <TouchableOpacity style={styles.Botao} onPress={() => { this.loadQustion(++index), this.calculo(index) }}>
              <Text style={styles.textButton} >{this.state.Proximo}</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    // justifyContent: 'center',
    backgroundColor: '#252C4A',
    flex: 1
  },
  textQuiz: {
    color: '#fff',
    fontSize: 20,
    textAlign: 'center',
    marginHorizontal: 12
  },
  Botao: {
    backgroundColor: '#3B54B8',
    borderRadius: 12,
    height: 40,
    width: 250,
    // alignItems: 'center'
    justifyContent: 'center',
    marginTop: 20,
    margin: 40
  },
  textButton: {
    textAlign: 'center',
    color: '#fff',
    alignItems: 'center',
    fontSize: 18
  },
  numQuiz: {
    color: '#8F98C1',
    fontWeight: 'bold',
    fontSize: 22
  },
  ViewNQUIZ: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    borderBottomColor: '#8F98C1',
    width: width - 40,
    borderRadius: 1,
    marginTop: 25,
    alignItems: 'center',
    marginBottom: 25,
  },
  escolhido: {
    fontSize: 20,
    color: '#fff',
    borderWidth: 2,
    textAlign: 'center',
    backgroundColor: '#3B54B8',
    borderRadius: 10,
    // margin: 8,
    // height: 40,
    width: 250,
    marginTop: 20,
    borderColor: '#3B54B8',
  },
  naoEscolhido: {
    fontSize: 20,
    color: '#fff',
    borderWidth: 2,
    textAlign: 'center',
    borderColor: '#3B54B8',
    borderRadius: 10,
    // margin: 8,
    // height: 40,
    width: 250,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 20
  }
});



// calculo pistburgh

    if (i <= 4 && i > 0) {
      /////////
      // condição de fazer os calculos 
      if (i == 1) {
        const { pergunta1 } = this.state;

        var s = pergunta1.split(':');
        var end = parseInt(s[0]) * 60 + parseInt(s[1]);
        a = end
      } else if (i == 2) {
        const { pergunta1 } = this.state;

        var s = pergunta1.split(':');
        var end = parseInt(s[0]) * 60 + parseInt(s[1]);
        b = end
      } else if (i == 3) {
        const { pergunta1 } = this.state;

        var s = pergunta1.split(':');
        var end = parseInt(s[0]) * 60 + parseInt(s[1]);
        c = end
      } else if (i == 4) {
        const { pergunta1 } = this.state;

        var s = pergunta1.split(':');
        var end = parseInt(s[0]) * 60 + parseInt(s[1]);
        d = end
      }
      // condição de fazer os calculos das horas
      //////////
      await this.setState({ pergunta1: '00:00' })

    }
// if (i > 4) {
    //   if (i === 6) {
    //     let pesoSelected = options.indexOf(selected)

    //     calculo = calculo + pesoSelected
    //     console.log(calculo)
    //   }
    //   //calcula soma de A a J
    //   if (i >= 7 && i <= 15) {
    //     let pesoSelected = options.indexOf(selected)
    //     soma = soma + pesoSelected
    //     if (i === 15) {
    //       console.log(soma)
    //       // console.log(calculo)
    //       if (soma === 0) {
    //         calculo = calculo + 0
    //       }
    //       else if (soma > 0 && soma <= 9) {
    //         calculo = calculo + 1
    //       } else if (soma >= 10 && soma <= 18) {
    //         calculo = calculo + 2
    //       } else if (soma >= 19 && soma <= 27) {
    //         calculo = calculo + 3
    //       }
    //     }
    //   }}
    //   //calcula soma de A a J
    //   if (i > 15) {
    //     let pesoSelected = options.indexOf(selected)

    //     calculo = calculo + pesoSelected
    //   }

















    const dados = await AsyncStorage.getItem('dados')
      const itens = JSON.parse(dados);
      const teste = {
        dado: itens,
        resposta: question
      }
      const db = firebase.database();
      await db.ref(`/${itens.idPesquisador}/Ostberg`).push(teste)
      await db.ref(`/Ostberg`).push(teste)
      await this.setState({ question: [0], nquestion: null })